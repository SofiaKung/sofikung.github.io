[["Map",1,2,9,10,237,238],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.13.7","content-config-digest","322ff9e12e7dc060","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://sofikung.com\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false},\"legacy\":{\"collections\":false}}","projects",["Map",11,12,46,47,124,125,170,171,200,201],"detect-fs-fraud",{"id":11,"data":13,"body":31,"filePath":32,"digest":33,"rendered":34,"legacyId":45},{"title":14,"date":15,"date_pretty":16,"description":17,"external_link":18,"hero":19,"seo":22,"importance":26,"type":27,"project":28},"Detecting Financial Statement Fraud with ML","2020-05-01","May 1, 2020","How machine learning can detect accounting fraud","https://medium.com/data-science/detecting-firms-with-intentional-misstatements-using-machine-learning-a943191f88cf",{"image":20,"alt":21},"assets/fs-ml.jpg","An article on detecting financial statrment fraud with machine learning ",{"keywords":23,"og_image":20},[24,25],"Fraud detection","Machine learning",2,"project",{"tags":29},[30,24,25],"Featured","\u003C!-- Optional markdown content can go here. -->","src/content/projects/detect-fs-fraud.md","5fff6a45051f77e4",{"html":31,"metadata":35},{"headings":36,"localImagePaths":37,"remoteImagePaths":38,"frontmatter":39,"imagePaths":44},[],[],[],{"title":14,"slug":11,"date":15,"date_pretty":16,"description":17,"importance":26,"type":27,"external_link":18,"hero":40,"project":41,"seo":43},{"image":20,"alt":21},{"tags":42},[30,24,25],{"keywords":23,"og_image":20},[],"detect-fs-fraud.md","visualise-spending-test",{"id":46,"data":48,"body":31,"filePath":100,"digest":101,"rendered":102,"legacyId":123},{"title":49,"date":50,"date_pretty":51,"description":52,"hero":53,"gallery":58,"content_blocks":81,"seo":91,"importance":96,"type":27,"project":97},"Visualizing Singapore Government Spending test page","2019-01-01","Jan 1, 2019","Insights into the spending pattern of each Ministry and Agency of Singapore Government",{"image":54,"alt":55,"link":56,"link_text":57},"assets/Geviz_project_cover.png","Singapore government spending dashboard showing budget allocation across ministries with interactive charts","https://is428-ay1819-geviz.shinyapps.io/Group7_GeViz/","View Live Project",{"layout":59,"columns":26,"items":60},"masonry",[61,66,71,76],{"src":62,"title":63,"alt":64,"caption":65},"assets/geviz/treemap.png","An Overview of Agency Spending within Each Ministry","Overview","Treemap chart is used here to provide a birds-eye view of each each ministry's spending breakdown by agency and category. The size of the box represents number of procurement contracts of each procurement category while the colour intensity represents the total amount of good and services procured.",{"src":67,"title":68,"alt":69,"caption":70},"assets/geviz/network.jpeg","Relationships Between Agencies and Suppliers","Breakdown","To best represent the interlinked relationship beteewen suppliers and agencies under a selected ministry, network diagram was used to shows the common suppliers between agencies. The triangle icon represents agencies while the circle icon represents suppliers.",{"src":72,"title":73,"alt":74,"caption":75},"assets/geviz/sangkey.jpeg","Main Suppliers of an Agency by Spending Category","Sankey","This sankey diagram was created with R's NetworkD3 library, the chart shows the cash flow between a selected agency and its suppliers for a selected procurement category. The thickness of the path represents the total dollar amount of goods and services procured from a particular supplier.",{"src":77,"title":78,"alt":79,"caption":80},"assets/geviz/wordcloud.jpeg","A Glimpse into Goods and Services Procured","Word cloud","This word cloud was created with R's Wordcloud2 library, it shows the top goods and services procured by a selected agency and a selected category. The size of the word within the word cloud corresponds to the frequency of the word in the procurement descriptions.",[82,86,89],{"type":83,"level":84,"text":85},"heading",3,"Project Overview",{"type":87,"text":88},"paragraph","How do you make sense of billions in government spending? Singapore's government budget data is publicly available, but buried in dense spreadsheets. We built an interactive dashboard using R Shiny that transforms Singapore's complex budget data into clear, explorable visualizations.",{"type":87,"text":90},"Read the complete project [here](https://wiki.smu.edu.sg/18191is428g1/GeViz)",{"keywords":92,"og_image":54},[93,94,95],"Dashboard","R Shiny","Working in progress",99,{"tags":98},[93,94,99],"Draft","src/content/projects/visualise-spending-test.md","389ba80dce6d6b39",{"html":31,"metadata":103},{"headings":104,"localImagePaths":105,"remoteImagePaths":106,"frontmatter":107,"imagePaths":122},[],[],[],{"title":49,"slug":46,"date":50,"date_pretty":51,"description":52,"importance":96,"type":27,"hero":108,"project":109,"content_blocks":111,"gallery":115,"seo":121},{"image":54,"alt":55,"link":56,"link_text":57},{"tags":110},[93,94,99],[112,113,114],{"type":83,"level":84,"text":85},{"type":87,"text":88},{"type":87,"text":90},{"layout":59,"columns":26,"items":116},[117,118,119,120],{"src":62,"title":63,"alt":64,"caption":65},{"src":67,"title":68,"alt":69,"caption":70},{"src":72,"title":73,"alt":74,"caption":75},{"src":77,"title":78,"alt":79,"caption":80},{"keywords":92,"og_image":54},[],"visualise-spending-test.md","visualise-spending",{"id":124,"data":126,"body":31,"filePath":146,"digest":147,"rendered":148,"legacyId":169},{"title":127,"date":50,"date_pretty":51,"description":128,"external_link":129,"hero":130,"gallery":131,"content_blocks":137,"seo":141,"importance":143,"type":27,"project":144},"Visualizing Singapore Government Spending","Insights into how ministries and agencies spend, with visual analytics","https://wiki.smu.edu.sg/18191is428g1/GeViz",{"image":54,"alt":55,"link":56,"link_text":57},{"layout":59,"columns":26,"items":132},[133,134,135,136],{"src":62,"title":63,"alt":64,"caption":65},{"src":67,"title":68,"alt":69,"caption":70},{"src":72,"title":73,"alt":74,"caption":75},{"src":77,"title":78,"alt":79,"caption":80},[138,139,140],{"type":83,"level":84,"text":85},{"type":87,"text":88},{"type":87,"text":90},{"keywords":142,"og_image":54},[93,94,95],1,{"tags":145},[30,93,94],"src/content/projects/visualise-spending.md","702809a97f7bbc2d",{"html":31,"metadata":149},{"headings":150,"localImagePaths":151,"remoteImagePaths":152,"frontmatter":153,"imagePaths":168},[],[],[],{"title":127,"slug":124,"date":50,"date_pretty":51,"description":128,"importance":143,"type":27,"external_link":129,"hero":154,"project":155,"content_blocks":157,"gallery":161,"seo":167},{"image":54,"alt":55,"link":56,"link_text":57},{"tags":156},[30,93,94],[158,159,160],{"type":83,"level":84,"text":85},{"type":87,"text":88},{"type":87,"text":90},{"layout":59,"columns":26,"items":162},[163,164,165,166],{"src":62,"title":63,"alt":64,"caption":65},{"src":67,"title":68,"alt":69,"caption":70},{"src":72,"title":73,"alt":74,"caption":75},{"src":77,"title":78,"alt":79,"caption":80},{"keywords":142,"og_image":54},[],"visualise-spending.md","visualise-air-quality",{"id":170,"data":172,"body":31,"filePath":186,"digest":187,"rendered":188,"legacyId":199},{"title":173,"date":174,"date_pretty":175,"description":176,"external_link":177,"hero":178,"seo":180,"importance":84,"type":27,"project":184},"Air Quality in Sofia City","2018-11-01","Nov 1, 2018","Analyzing official and citizen-measured air quality in Sofia to uncover patterns, anomalies, and weather links","https://public.tableau.com/app/profile/sofiakung/viz/SofiaAirQuality/AirQualityinSofia",{"image":179,"alt":176},"assets/airquality.png",{"keywords":181,"og_image":20},[182,183],"Visualization","Tableau",{"tags":185},[182,183],"src/content/projects/air-quality.md","6a39f47d6ce15d0f",{"html":31,"metadata":189},{"headings":190,"localImagePaths":191,"remoteImagePaths":192,"frontmatter":193,"imagePaths":198},[],[],[],{"title":173,"slug":170,"date":174,"date_pretty":175,"description":176,"importance":84,"type":27,"external_link":177,"hero":194,"project":195,"seo":197},{"image":179,"alt":176},{"tags":196},[182,183],{"keywords":181,"og_image":20},[],"air-quality.md","ai-book-summaries",{"id":200,"data":202,"filePath":222,"digest":223,"rendered":224,"legacyId":236},{"title":203,"date":204,"date_pretty":205,"description":206,"external_link":207,"hero":208,"seo":211,"importance":143,"type":27,"project":217},"BonsaiMind","2025-10-08","Oct 8, 2025","A web app to track books you've read, store highlights, and generate AI-powered book summaries.","https://www.bonsai-mind.com",{"image":209,"alt":210},"assets/bonsaimind.png","A minimalist web app for collecting books, storing highlights, and generating AI summaries.",{"keywords":212,"og_image":209},[213,214,215,216],"AI Summaries","Book Tracker","Web App","Reading Highlights",{"tags":218},[30,215,219,220,221],"AI Summarization","Books","Productivity","src/content/projects/bonsaimind.md","741a992a95caf033",{"html":225,"metadata":226},"",{"headings":227,"localImagePaths":228,"remoteImagePaths":229,"frontmatter":230,"imagePaths":235},[],[],[],{"title":203,"slug":200,"date":204,"date_pretty":205,"description":206,"importance":143,"type":27,"external_link":207,"hero":231,"project":232,"seo":234},{"image":209,"alt":210},{"tags":233},[30,215,219,220,221],{"keywords":212,"og_image":209},[],"bonsaimind.md","posts",["Map",239,240,263,264],"prompt-engineering",{"id":239,"data":241,"body":31,"filePath":251,"digest":252,"rendered":253,"legacyId":262},{"title":242,"date":243,"date_pretty":244,"description":245,"seo":246,"type":249,"tags":250},"Notes on prompt engineering","2025-09-08","Sep 8, 2025"," My cheatsheet on prompt engineering from Google's whitepaper",{"keywords":247},[248],"Coming soon","post",[248,99],"src/content/posts/prompt-engineering.md","a5502abac0ece68a",{"html":31,"metadata":254},{"headings":255,"localImagePaths":256,"remoteImagePaths":257,"frontmatter":258,"imagePaths":261},[],[],[],{"title":242,"slug":239,"date":243,"date_pretty":244,"description":245,"type":249,"tags":259,"seo":260},[248,99],{"keywords":247},[],"prompt-engineering.md","vibe-coding-portfolio",{"id":263,"data":265,"body":280,"filePath":281,"digest":282,"rendered":283,"legacyId":332},{"title":266,"date":267,"date_pretty":268,"description":269,"seo":270,"type":249,"tags":276},"What I Learned Vibe Coding My Portfolio in 4 Days","2025-09-20","Sep 20, 2025","Lessons on taste, prompting, frameworks, and building a portfolio website with Codex",{"keywords":271},[272,273,274,275],"AI portfolio building","prompt engineering","vibe coding","Astro framework",[277,278,279],"Vibe Coding","Prompting","Learning","## The Discovery Process: Learning What to Ask\n\nI started building this portfolio website with a Wix resume template as inspiration, asking LLM questions as I went. While this iterative approach worked, I only realized what I truly wanted to build after several rounds of implementation.\n\nThe process taught me something valuable: I should have first considered which framework, design approach and content management strategy to adopt.\n\nWhen I realized that I needed markdown support for blog posts, I had to migrate to a new framework—not because I didn't plan, but because I didn't know the right questions to ask initially.\n\n## AI Can't Give You Taste\n\nAI can only build what you ask for. Since I based my design on a resume-like template, my software engineer friends told me: \"This looks like a resume. You might as well not build one.\"\n\nThey gave me a few portfolio references that worked—minimalistic, compact, and functional designs that matched my goals. After studying these examples, I spent another day rebuilding the entire homepage based on the new reference.\n\nThat's when I realized I needed to define my taste, styling, and purpose clearly before starting—because the effort to rebuild is high. (The specific questions I should have asked are covered in my framework below.)\n\n## Trial and Error: What Works for AI-Assisted Coding\n\nI started with Claude, hit rate limits, then switched to Codex (ChatGPT Plus). But real progress came when I switched from terminal-based prompting to the Codex plugin in VS Code.\n\nThe VS Code plugin was easy to use—it allowed me to upload reference images easily, made reviewing conversation history seamless, and made iterating on code efficient.\n\nI discovered that:\n\n- **Screenshot-to-code translation**: Codex could convert UI screenshots into functional code with ~80% accuracy. You can also paste website URLs into your prompt as reference.\n- **Debugging specificity**: Basic HTML/CSS knowledge helped me give precise feedback. Codex understands better when you say 'Move the experience-description into the first column of the grid' than 'Move the experience-description to the left side of the box.'\n- **Planning vs. agent mode**: Define requirements in planning mode before implementing in agent mode to prevent unnecessary rework.\n\n## Building Production-Quality Code with AI\n\nWhile building this project, I faced another challenge: getting AI to write quality code. LLMs build like enthusiastic juniors—functional but lacking production standards. They won't automatically include:\n\n- CSS variables for consistent styling\n- Mobile responsiveness\n- Automated code cleaning whenever you rebuild or migrate frameworks\n- Comprehensive README\n- Logical file organization based on your web framework\n- Creating reusable page templates and components to keep your styling consistent\n\nYou have to ask for all of the above explicitly.\n\n## Your Website's Purpose Determines Your Tech Stack\n\nJust when I thought I was done building, I hit a fundamental problem: I had chosen the wrong tech stack. Adding new content meant updating JSON files, which quickly became cumbersome to maintain.\n\nMy friend suggested using GitHub markdown as an easier solution, but my vanilla HTML/CSS setup couldn't handle markdown files gracefully. Every new post triggered layout bugs.\n\nThat's when I learned that your website's purpose should drive your tech stack choice—this should be the first question you ask. I needed a framework built for markdown content, which led me to Astro with its native markdown support, file-based routing, and static generation.\n\n### Additional Learnings\n\nBeyond the core lessons, this project taught me about other development skills.\n\n- **Version control fluency**: Writing meaningful commit messages and revisiting Git workflows\n- **Deployment processes**: Learning Astro deployment and hosting options\n- **CMS ecosystem knowledge**: Understanding different types of CMS systems from file-based to headless CMS solutions\n\n## &nbsp;\n\n---\n\n## The Questions I Wish I'd Asked First\n\nAsk these questions before building anything:\n\n#### Design & Vision\n\n- What websites do I want mine to look and feel like? Pick 1 or 2 websites\n- What specific elements do I want to steal? (Screenshot specific elements: nav style, button design, color palette, typography)\n- What’s the main thing I want visitors to do? (Contact me, view my work, read my writing)\n- What's my content hierarchy? (What should visitors see first, second, third?)\n\n#### Tech Stack & Tools\n\n- Do I want a simple blog, a portfolio showcase, or something more complex?\n- Where will I host this? (GitHub, Vercel, etc.)\n- How will I handle version control? (GitHub Desktop, Git basics)\n\n#### Content Strategy\n\n- How often I update affects framework choice:\n  - Daily/weekly → fast and simple (Astro with markdown)\n  - Monthly → static generation is fine\n- How I update determines tech stack:\n  - Markdown → Astro, Next.js\n  - JSON → Static generators\n  - CMS → Headless CMS + framework\n- Visitor interaction needs affect hosting decisions:\n  - None → Static hosting (GitHub Pages, Netlify)\n  - Comments/forms → Backend services or integrations\n  - Accounts → Database + auth system\n\n#### Quality Code\n\n- What are the key steps to ensure my code is good? (Fast loading, responsive, clean code)\n\n## Reflection\n\nWorking on this vibe coding project was incredibly fun. While some rework was inevitable, the learning made it worthwhile. I hope this framework helps you build faster and more intentionally on your next project.\n\nHappy building!","src/content/posts/vibe-coding.md","72d0cefc7d4e0cfc",{"html":284,"metadata":285},"\u003Ch2 id=\"the-discovery-process-learning-what-to-ask\">The Discovery Process: Learning What to Ask\u003C/h2>\n\u003Cp>I started building this portfolio website with a Wix resume template as inspiration, asking LLM questions as I went. While this iterative approach worked, I only realized what I truly wanted to build after several rounds of implementation.\u003C/p>\n\u003Cp>The process taught me something valuable: I should have first considered which framework, design approach and content management strategy to adopt.\u003C/p>\n\u003Cp>When I realized that I needed markdown support for blog posts, I had to migrate to a new framework—not because I didn’t plan, but because I didn’t know the right questions to ask initially.\u003C/p>\n\u003Ch2 id=\"ai-cant-give-you-taste\">AI Can’t Give You Taste\u003C/h2>\n\u003Cp>AI can only build what you ask for. Since I based my design on a resume-like template, my software engineer friends told me: “This looks like a resume. You might as well not build one.”\u003C/p>\n\u003Cp>They gave me a few portfolio references that worked—minimalistic, compact, and functional designs that matched my goals. After studying these examples, I spent another day rebuilding the entire homepage based on the new reference.\u003C/p>\n\u003Cp>That’s when I realized I needed to define my taste, styling, and purpose clearly before starting—because the effort to rebuild is high. (The specific questions I should have asked are covered in my framework below.)\u003C/p>\n\u003Ch2 id=\"trial-and-error-what-works-for-ai-assisted-coding\">Trial and Error: What Works for AI-Assisted Coding\u003C/h2>\n\u003Cp>I started with Claude, hit rate limits, then switched to Codex (ChatGPT Plus). But real progress came when I switched from terminal-based prompting to the Codex plugin in VS Code.\u003C/p>\n\u003Cp>The VS Code plugin was easy to use—it allowed me to upload reference images easily, made reviewing conversation history seamless, and made iterating on code efficient.\u003C/p>\n\u003Cp>I discovered that:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Screenshot-to-code translation\u003C/strong>: Codex could convert UI screenshots into functional code with ~80% accuracy. You can also paste website URLs into your prompt as reference.\u003C/li>\n\u003Cli>\u003Cstrong>Debugging specificity\u003C/strong>: Basic HTML/CSS knowledge helped me give precise feedback. Codex understands better when you say ‘Move the experience-description into the first column of the grid’ than ‘Move the experience-description to the left side of the box.’\u003C/li>\n\u003Cli>\u003Cstrong>Planning vs. agent mode\u003C/strong>: Define requirements in planning mode before implementing in agent mode to prevent unnecessary rework.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"building-production-quality-code-with-ai\">Building Production-Quality Code with AI\u003C/h2>\n\u003Cp>While building this project, I faced another challenge: getting AI to write quality code. LLMs build like enthusiastic juniors—functional but lacking production standards. They won’t automatically include:\u003C/p>\n\u003Cul>\n\u003Cli>CSS variables for consistent styling\u003C/li>\n\u003Cli>Mobile responsiveness\u003C/li>\n\u003Cli>Automated code cleaning whenever you rebuild or migrate frameworks\u003C/li>\n\u003Cli>Comprehensive README\u003C/li>\n\u003Cli>Logical file organization based on your web framework\u003C/li>\n\u003Cli>Creating reusable page templates and components to keep your styling consistent\u003C/li>\n\u003C/ul>\n\u003Cp>You have to ask for all of the above explicitly.\u003C/p>\n\u003Ch2 id=\"your-websites-purpose-determines-your-tech-stack\">Your Website’s Purpose Determines Your Tech Stack\u003C/h2>\n\u003Cp>Just when I thought I was done building, I hit a fundamental problem: I had chosen the wrong tech stack. Adding new content meant updating JSON files, which quickly became cumbersome to maintain.\u003C/p>\n\u003Cp>My friend suggested using GitHub markdown as an easier solution, but my vanilla HTML/CSS setup couldn’t handle markdown files gracefully. Every new post triggered layout bugs.\u003C/p>\n\u003Cp>That’s when I learned that your website’s purpose should drive your tech stack choice—this should be the first question you ask. I needed a framework built for markdown content, which led me to Astro with its native markdown support, file-based routing, and static generation.\u003C/p>\n\u003Ch3 id=\"additional-learnings\">Additional Learnings\u003C/h3>\n\u003Cp>Beyond the core lessons, this project taught me about other development skills.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Version control fluency\u003C/strong>: Writing meaningful commit messages and revisiting Git workflows\u003C/li>\n\u003Cli>\u003Cstrong>Deployment processes\u003C/strong>: Learning Astro deployment and hosting options\u003C/li>\n\u003Cli>\u003Cstrong>CMS ecosystem knowledge\u003C/strong>: Understanding different types of CMS systems from file-based to headless CMS solutions\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"\"> \u003C/h2>\n\u003Chr>\n\u003Ch2 id=\"the-questions-i-wish-id-asked-first\">The Questions I Wish I’d Asked First\u003C/h2>\n\u003Cp>Ask these questions before building anything:\u003C/p>\n\u003Ch4 id=\"design--vision\">Design &#x26; Vision\u003C/h4>\n\u003Cul>\n\u003Cli>What websites do I want mine to look and feel like? Pick 1 or 2 websites\u003C/li>\n\u003Cli>What specific elements do I want to steal? (Screenshot specific elements: nav style, button design, color palette, typography)\u003C/li>\n\u003Cli>What’s the main thing I want visitors to do? (Contact me, view my work, read my writing)\u003C/li>\n\u003Cli>What’s my content hierarchy? (What should visitors see first, second, third?)\u003C/li>\n\u003C/ul>\n\u003Ch4 id=\"tech-stack--tools\">Tech Stack &#x26; Tools\u003C/h4>\n\u003Cul>\n\u003Cli>Do I want a simple blog, a portfolio showcase, or something more complex?\u003C/li>\n\u003Cli>Where will I host this? (GitHub, Vercel, etc.)\u003C/li>\n\u003Cli>How will I handle version control? (GitHub Desktop, Git basics)\u003C/li>\n\u003C/ul>\n\u003Ch4 id=\"content-strategy\">Content Strategy\u003C/h4>\n\u003Cul>\n\u003Cli>How often I update affects framework choice:\n\u003Cul>\n\u003Cli>Daily/weekly → fast and simple (Astro with markdown)\u003C/li>\n\u003Cli>Monthly → static generation is fine\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>How I update determines tech stack:\n\u003Cul>\n\u003Cli>Markdown → Astro, Next.js\u003C/li>\n\u003Cli>JSON → Static generators\u003C/li>\n\u003Cli>CMS → Headless CMS + framework\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Visitor interaction needs affect hosting decisions:\n\u003Cul>\n\u003Cli>None → Static hosting (GitHub Pages, Netlify)\u003C/li>\n\u003Cli>Comments/forms → Backend services or integrations\u003C/li>\n\u003Cli>Accounts → Database + auth system\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch4 id=\"quality-code\">Quality Code\u003C/h4>\n\u003Cul>\n\u003Cli>What are the key steps to ensure my code is good? (Fast loading, responsive, clean code)\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"reflection\">Reflection\u003C/h2>\n\u003Cp>Working on this vibe coding project was incredibly fun. While some rework was inevitable, the learning made it worthwhile. I hope this framework helps you build faster and more intentionally on your next project.\u003C/p>\n\u003Cp>Happy building!\u003C/p>",{"headings":286,"localImagePaths":326,"remoteImagePaths":327,"frontmatter":328,"imagePaths":331},[287,290,293,296,299,302,305,307,310,314,317,320,323],{"depth":26,"slug":288,"text":289},"the-discovery-process-learning-what-to-ask","The Discovery Process: Learning What to Ask",{"depth":26,"slug":291,"text":292},"ai-cant-give-you-taste","AI Can’t Give You Taste",{"depth":26,"slug":294,"text":295},"trial-and-error-what-works-for-ai-assisted-coding","Trial and Error: What Works for AI-Assisted Coding",{"depth":26,"slug":297,"text":298},"building-production-quality-code-with-ai","Building Production-Quality Code with AI",{"depth":26,"slug":300,"text":301},"your-websites-purpose-determines-your-tech-stack","Your Website’s Purpose Determines Your Tech Stack",{"depth":84,"slug":303,"text":304},"additional-learnings","Additional Learnings",{"depth":26,"slug":225,"text":306}," ",{"depth":26,"slug":308,"text":309},"the-questions-i-wish-id-asked-first","The Questions I Wish I’d Asked First",{"depth":311,"slug":312,"text":313},4,"design--vision","Design & Vision",{"depth":311,"slug":315,"text":316},"tech-stack--tools","Tech Stack & Tools",{"depth":311,"slug":318,"text":319},"content-strategy","Content Strategy",{"depth":311,"slug":321,"text":322},"quality-code","Quality Code",{"depth":26,"slug":324,"text":325},"reflection","Reflection",[],[],{"title":266,"slug":263,"date":267,"date_pretty":268,"description":269,"type":249,"tags":329,"seo":330},[277,278,279],{"keywords":271},[],"vibe-coding.md"]